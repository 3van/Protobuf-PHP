<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: MysqlQueryResult.proto


namespace MysqlQueryResult\ResultSet {

  class Header extends \DrSlump\Protobuf\LazyMessage {

    /**  @var string[]  */
    //public $name = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.MysqlQueryResult.ResultSet.Header');

      // REPEATED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \MysqlQueryResult\ResultSet\Header
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return string
     */
    public function getName($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \MysqlQueryResult\ResultSet\Header
     */
    public function setName( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return string[]
     */
    public function getNameList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param string $value
     * @return \MysqlQueryResult\ResultSet\Header
     */
    public function addName( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace MysqlQueryResult\ResultSet\Row {

  class Column extends \DrSlump\Protobuf\LazyMessage {

    /**  @var boolean */
    //public $null = true;
    
    /**  @var string */
    //public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.MysqlQueryResult.ResultSet.Row.Column');

      // OPTIONAL BOOL null = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <null> has a value
     *
     * @return boolean
     */
    public function hasNull(){
      return $this->_has(1);
    }
    
    /**
     * Clear <null> value
     *
     * @return \MysqlQueryResult\ResultSet\Row\Column
     */
    public function clearNull(){
      return $this->_clear(1);
    }
    
    /**
     * Get <null> value
     *
     * @return boolean
     */
    public function getNull(){
      return $this->_get(1);
    }
    
    /**
     * Set <null> value
     *
     * @param boolean $value
     * @return \MysqlQueryResult\ResultSet\Row\Column
     */
    public function setNull( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \MysqlQueryResult\ResultSet\Row\Column
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \MysqlQueryResult\ResultSet\Row\Column
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace MysqlQueryResult\ResultSet {

  class Row extends \DrSlump\Protobuf\LazyMessage {

    /**  @var \MysqlQueryResult\ResultSet\Row\Column[]  */
    //public $column = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.MysqlQueryResult.ResultSet.Row');

      // REPEATED MESSAGE column = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "column";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\MysqlQueryResult\ResultSet\Row\Column';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <column> has a value
     *
     * @return boolean
     */
    public function hasColumn(){
      return $this->_has(1);
    }
    
    /**
     * Clear <column> value
     *
     * @return \MysqlQueryResult\ResultSet\Row
     */
    public function clearColumn(){
      return $this->_clear(1);
    }
    
    /**
     * Get <column> value
     *
     * @param int $idx
     * @return \MysqlQueryResult\ResultSet\Row\Column
     */
    public function getColumn($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <column> value
     *
     * @param \MysqlQueryResult\ResultSet\Row\Column $value
     * @return \MysqlQueryResult\ResultSet\Row
     */
    public function setColumn(\MysqlQueryResult\ResultSet\Row\Column $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <column>
     *
     * @return \MysqlQueryResult\ResultSet\Row\Column[]
     */
    public function getColumnList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <column>
     *
     * @param \MysqlQueryResult\ResultSet\Row\Column $value
     * @return \MysqlQueryResult\ResultSet\Row
     */
    public function addColumn(\MysqlQueryResult\ResultSet\Row\Column $value){
     return $this->_add(1, $value);
    }
  }
}

namespace MysqlQueryResult {

  class ResultSet extends \DrSlump\Protobuf\LazyMessage {

    /**  @var \MysqlQueryResult\ResultSet\Header */
    //public $header = null;
    
    /**  @var \MysqlQueryResult\ResultSet\Row[]  */
    //public $row = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.MysqlQueryResult.ResultSet');

      // OPTIONAL MESSAGE header = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "header";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\MysqlQueryResult\ResultSet\Header';
      $descriptor->addField($f);

      // REPEATED MESSAGE row = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "row";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\MysqlQueryResult\ResultSet\Row';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <header> has a value
     *
     * @return boolean
     */
    public function hasHeader(){
      return $this->_has(1);
    }
    
    /**
     * Clear <header> value
     *
     * @return \MysqlQueryResult\ResultSet
     */
    public function clearHeader(){
      return $this->_clear(1);
    }
    
    /**
     * Get <header> value
     *
     * @return \MysqlQueryResult\ResultSet\Header
     */
    public function getHeader(){
      return $this->_get(1);
    }
    
    /**
     * Set <header> value
     *
     * @param \MysqlQueryResult\ResultSet\Header $value
     * @return \MysqlQueryResult\ResultSet
     */
    public function setHeader(\MysqlQueryResult\ResultSet\Header $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <row> has a value
     *
     * @return boolean
     */
    public function hasRow(){
      return $this->_has(2);
    }
    
    /**
     * Clear <row> value
     *
     * @return \MysqlQueryResult\ResultSet
     */
    public function clearRow(){
      return $this->_clear(2);
    }
    
    /**
     * Get <row> value
     *
     * @param int $idx
     * @return \MysqlQueryResult\ResultSet\Row
     */
    public function getRow($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <row> value
     *
     * @param \MysqlQueryResult\ResultSet\Row $value
     * @return \MysqlQueryResult\ResultSet
     */
    public function setRow(\MysqlQueryResult\ResultSet\Row $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <row>
     *
     * @return \MysqlQueryResult\ResultSet\Row[]
     */
    public function getRowList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <row>
     *
     * @param \MysqlQueryResult\ResultSet\Row $value
     * @return \MysqlQueryResult\ResultSet
     */
    public function addRow(\MysqlQueryResult\ResultSet\Row $value){
     return $this->_add(2, $value);
    }
  }
}

namespace requestd {

  class MysqlQueryResult extends \DrSlump\Protobuf\LazyMessage {

    /**  @var int */
    ////public $successes = null;
    
    /**  @var int */
    ////public $failures = null;
    
    /**  @var float */
    ////public $percentSuccess = null;
    
    /**  @var \MysqlQueryResult\ResultSet[]  */
    ////public $resultset = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.MysqlQueryResult');

      // OPTIONAL UINT64 successes = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "successes";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 failures = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "failures";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE percentSuccess = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "percentSuccess";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE resultset = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "resultset";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\MysqlQueryResult\ResultSet';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <successes> has a value
     *
     * @return boolean
     */
    public function hasSuccesses(){
      return $this->_has(1);
    }
    
    /**
     * Clear <successes> value
     *
     * @return \MysqlQueryResult
     */
    public function clearSuccesses(){
      return $this->_clear(1);
    }
    
    /**
     * Get <successes> value
     *
     * @return int
     */
    public function getSuccesses(){
      return $this->_get(1);
    }
    
    /**
     * Set <successes> value
     *
     * @param int $value
     * @return \MysqlQueryResult
     */
    public function setSuccesses( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <failures> has a value
     *
     * @return boolean
     */
    public function hasFailures(){
      return $this->_has(2);
    }
    
    /**
     * Clear <failures> value
     *
     * @return \MysqlQueryResult
     */
    public function clearFailures(){
      return $this->_clear(2);
    }
    
    /**
     * Get <failures> value
     *
     * @return int
     */
    public function getFailures(){
      return $this->_get(2);
    }
    
    /**
     * Set <failures> value
     *
     * @param int $value
     * @return \MysqlQueryResult
     */
    public function setFailures( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <percentSuccess> has a value
     *
     * @return boolean
     */
    public function hasPercentSuccess(){
      return $this->_has(3);
    }
    
    /**
     * Clear <percentSuccess> value
     *
     * @return \MysqlQueryResult
     */
    public function clearPercentSuccess(){
      return $this->_clear(3);
    }
    
    /**
     * Get <percentSuccess> value
     *
     * @return float
     */
    public function getPercentSuccess(){
      return $this->_get(3);
    }
    
    /**
     * Set <percentSuccess> value
     *
     * @param float $value
     * @return \MysqlQueryResult
     */
    public function setPercentSuccess( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <resultset> has a value
     *
     * @return boolean
     */
    public function hasResultset(){
      return $this->_has(4);
    }
    
    /**
     * Clear <resultset> value
     *
     * @return \MysqlQueryResult
     */
    public function clearResultset(){
      return $this->_clear(4);
    }
    
    /**
     * Get <resultset> value
     *
     * @param int $idx
     * @return \MysqlQueryResult\ResultSet
     */
    public function getResultset($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <resultset> value
     *
     * @param \MysqlQueryResult\ResultSet $value
     * @return \MysqlQueryResult
     */
    public function setResultset(\MysqlQueryResult\ResultSet $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <resultset>
     *
     * @return \MysqlQueryResult\ResultSet[]
     */
    public function getResultsetList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <resultset>
     *
     * @param \MysqlQueryResult\ResultSet $value
     * @return \MysqlQueryResult
     */
    public function addResultset(\MysqlQueryResult\ResultSet $value){
     return $this->_add(4, $value);
    }
  }
}

